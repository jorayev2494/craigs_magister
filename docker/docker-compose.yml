version: "3.7"

x-php_cli: &queue_worker_cli
    build: 
        context: ./queue_worker
        dockerfile: dockerfile
    restart: unless-stopped    
    working_dir: /var/project
    volumes: 
        - ../../:/var/project

x-ngx_proxy: &proxy_server
    build: 
        context: ./nginx_proxy
        dockerfile: dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_ngx_proxy
    restart: unless-stopped
    volumes: 
        - ../:/var/project
    depends_on: 
        - ngx
    links: 
        - ngx

services: 
    # Nginx Service
    ngx:
        build: 
            context: ./nginx
            dockerfile: dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}_ngx
        restart: unless-stopped
        tty: true
        volumes: 
            - ../:/var/project
        depends_on: 
            - php
        links: 
            - php
        ports: 
            - ${NGX_PORT}:80
            # - 8888:8888
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    ngx_proxy_imgs:
        <<: *proxy_server
        ports: 
            - 9999:8888
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    # PHP Service
    php:
        build: 
            context: ./php
            dockerfile: dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}_php_fpm
        tty: true
        volumes: 
            - ../:/var/project
        depends_on: 
            - mysql
        links: 
            - mysql
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    # Node Service
    # node:
    #     build: 
    #         context: ./node
    #         dockerfile: dockerfile
    #     container_name: ${COMPOSE_PROJECT_NAME}_node
    #     tty: true
    #     volumes: 
    #         - ../:/var/project
    #     networks: 
    #         - laravel-${COMPOSE_PROJECT_NAME}

    # MySQL Service
    mysql:
        image: mysql:5.7
        container_name: ${COMPOSE_PROJECT_NAME}_db
        restart: unless-stopped
        tty: true
        volumes: 
            - ./mysql/data:/var/lib/mysql
        ports: 
            - ${MYSQL_PORT}:3306
        environment: 
            - MYSQL_DATABASE=laravel-${COMPOSE_PROJECT_NAME}
            - MYSQL_ROOT_PASSWORD=laravel
        command: [
                'mysqld', 
                '--character-set-server=utf8mb4',
                '--collation-server=utf8mb4_unicode_ci'
            ]
            # - mysqld \ 
            #   --character-set-server=utf8mb4 \ 
            #   --collation-server=utf8mb4_unicode_ci
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    # REDIS Service
    redis:
        image: redis:latest
        container_name: ${COMPOSE_PROJECT_NAME}_redis
        restart: unless-stopped
        ports: 
            - ${REDIS_PORT}:6379
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    # CRON Service
    cron:
        build:
            context: ./cron
            dockerfile: dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}_cron
        restart: unless-stopped
        volumes: 
            - ../:/var/project
        working_dir: /var/project
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}
    
    # Queue Worker
    queue_worker:
        <<: *queue_worker_cli
        container_name: ${COMPOSE_PROJECT_NAME}_queue_worker
        command: ['php', 'artisan', 'queue:work', '--sleep=1', '--queue=default']
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}
    
    # Queue Worker Emails
    queue_worker_email:
        <<: *queue_worker_cli
        container_name: ${COMPOSE_PROJECT_NAME}_queue_worker_email
        command: ['php', 'artisan', 'queue:work', '--sleep=2', '--queue=emails']
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

    # Queue Worker Jobs
    queue_worker_job:
        <<: *queue_worker_cli
        container_name: ${COMPOSE_PROJECT_NAME}_queue_worker_job
        command: ['php', 'artisan', 'queue:work', '--sleep=3', '--queue=jobs']
        networks: 
            - laravel-${COMPOSE_PROJECT_NAME}

networks: 
    laravel-craigs:
        driver: bridge